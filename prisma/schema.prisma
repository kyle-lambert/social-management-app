datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String                      @id @default(cuid())
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt
  firstName  String
  lastName   String
  email      String                      @unique
  isVerified Boolean                     @default(false)
  password   Password?
  tenants    TenantMembership[]
  workspaces TenantWorkspaceMembership[]
}

model Password {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

// enum TenantRole {
//   TENANT_ADMIN
//   TENANT_MEMBER
//   TENANT_CONTRIBUTER
// }

// enum WorkspaceRole {
//   WORKSPACE_ADMIN
//   WORKSPACE_MEMBER
//   WORKSPACE_VIEWER
// }

model TenantMembership {
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId String
  tenant   Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleId   String
  role     TenantRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@unique([userId, tenantId])
  @@index([userId])
  @@index([tenantId])
  @@index([roleId])
}

model TenantWorkspaceMembership {
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId    String
  tenant      Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  roleId      String
  role        WorkspaceRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId, workspaceId])
  @@unique([userId, tenantId, workspaceId])
  @@index([userId])
  @@index([tenantId])
  @@index([workspaceId])
  @@index([roleId])
}

model Tenant {
  id                   String                      @id @default(cuid())
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  name                 String
  users                TenantMembership[]
  roles                TenantRole[]
  workspaces           Workspace[]
  workspaceMemberships TenantWorkspaceMembership[]
}

model Workspace {
  id        String                      @id @default(cuid())
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
  name      String
  tenantId  String
  tenant    Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users     TenantWorkspaceMembership[]
  roles     WorkspaceRole[]

  @@index([tenantId])
}

model TenantRole {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  name        String
  tenantId    String
  tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users       TenantMembership[]
  permissions TenantPermission[]

  @@unique([id, tenantId])
  @@index([tenantId])
}

model WorkspaceRole {
  id          String                      @id @default(cuid())
  createdAt   DateTime                    @default(now())
  name        String
  workspaceId String
  workspace   Workspace                   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  users       TenantWorkspaceMembership[]
  permissions WorkspacePermission[]

  @@unique([id, workspaceId])
  @@index([workspaceId])
}

model TenantPermission {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  name      String
  roles     TenantRole[]
}

model WorkspacePermission {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  name      String
  roles     WorkspaceRole[]
}
