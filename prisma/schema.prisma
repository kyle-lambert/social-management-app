datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  firstName  String
  lastName   String
  email      String       @unique
  isVerified Boolean      @default(false)
  password   Password?
  tenants    UserTenant[]
}

model Password {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}

enum TenantRole {
  TENANT_OWNER
  TENANT_MEMBER
  TENANT_VIEWER
  TENANT_CONTRIBUTER
}

enum WorkspaceRole {
  WORKSPACE_ADMIN
  WORKSPACE_MEMBER
  WORKSPACE_VIEWER
}

model UserTenant {
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roleId   String
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@unique([userId, tenantId, roleId])
  @@index([userId])
  @@index([tenantId])
  @@index([roleId])
}

model Tenant {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  users      UserTenant[]
  workspaces Workspace[]
  roles      Role[]
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Role {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  name        String
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userTenant  UserTenant[]
  permissions Permission[]

  @@unique([id, tenantId])
  @@index([tenantId])
}

model Permission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  roles     Role[]
}
